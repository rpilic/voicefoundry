service: voicefoundry
# app and org for use with dashboard.serverless.com
app: voicefoundry-app
org: robpilic

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  profile: ${file(./config.json):awsProfile}
  iamRoleStatements:
    - Effect: Allow
      Action: s3:ListBucket
      Resource: !Join ['', [ 'arn:aws:s3:::', !Ref ServerlessDeploymentBucket] ]
    - Effect: Allow
      Action: s3:PutObject
      Resource: !Join ['', [ 'arn:aws:s3:::', !Ref ServerlessDeploymentBucket, '/*' ] ]
    - Effect: Allow
      Action: s3:GetObject
      Resource: !Join [ '/', [ !GetAtt S3Bucket.Arn, '*' ]]
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt DataTable.Arn

plugins:
  - serverless-plugin-upload-s3
  - process-file-data-plugin

package:
  exclude:
    - node_modules/**
    - config.json
    - .prettier*
    - package*
    - README.md

custom:
  alarmEmail: ${file(./config.json):alarmEmail}
  dataFileName: data.json
  filesToUpload:
    - fileName: ${self:custom.dataFileName}
      localPath: data/${self:custom.dataFileName}
      s3Bucket: ${self:custom.s3Bucket}
  logRetentionDays: ${file(./config.json):logRetentionDays,14}
  s3Bucket: ${file(./config.json):s3Bucket}

functions:
    dataSave:
      handler: handler.save
      name: dataSave-${self:provider.stage}
      memorySize: 512
      timeout: 10
      environment:
          TABLE_NAME: !Ref DataTable
      # events:
      #   - s3:
      #     bucket: ${self:custom.s3Bucket}
      #     event: s3:ObjectCreated:*

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: ${self:custom.s3Bucket}

    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    CloudwatchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: ${self:functions.dataSave.name}
        RetentionInDays: ${self:custom.logRetentionDays}

    AlarmSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: CloudWatch Alarm notification topic
        TopicName: alarm-notification-topic
        Subscription:
          - Protocol: Email
            Endpoint: ${self:custom.alarmEmail}

    LambdaErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      DependsOn: AlarmSnsTopic
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - !Ref AlarmSnsTopic
        AlarmDescription: Alarms when the lambda function returns an error
        AlarmName: !Sub robpilic/${self:provider.stage}/Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:functions.dataSave.name}
        EvaluationPeriods: 1
        InsufficientDataActions: []
        MetricName: Errors
        Namespace: AWS/Lambda
        OKActions: []
        Period: 60
        Statistic: Maximum
        Threshold: 1
        Unit: Count
